#!/bin/ash

set -e

source /usr/local/bin/colors
source /usr/local/bin/logo

# Export default variables
export APP_PATH='/home/app'
export APP_BIN_PATH='/home/app/bin'
export APP_TEMP_PATH="$APP_PATH/tmp"
export APP_SETUP_LOCK="$APP_TEMP_PATH/setup.lock"
export APP_SETUP_WAIT="2"
export USER=app
export RUBY_VERSION=2.5.0
export HOME_PATH=/home
export APP_PATH=/home/app
export HISTFILE=/home/app/.ash_history
export BUNDLE_PATH=/home/.gems
export BUNDLE_BIN=/home/.gems/bin
export BUNDLE_APP_CONFIG=/home/.gems
export IRBRC=/home/.irbrc
export PATH=/usr/local/bin/:/home/app/bin/:/home/app/:/home/.bundler/bin/:$PATH

# Functions
gems_up_to_date() { bundle check 1> /dev/null; }

# Install script dependencies
if [ "$RAILS_ENV" = "development" -o "$RAILS_ENV" = "test" ]; then
  export DISABLE_DATABASE_ENVIRONMENT_CHECK=1

  echo -e "${BGreen}> Booting application on development/test mode...${Color_Off}"
  echo "> RACK_ENV=$RACK_ENV and RAILS_ENV=$RAILS_ENV"
  echo "> Database is set as $DATABASE_URL"
fi

if [ -z "$1" ]; then set -- /bin/ash "$@"; fi

echo "> Checking system bundle"
if ! gems_up_to_date; then
  if [ -f Gemfile ]; then
    echo "> Installing/Updating Rails dependencies"
    bundle install
    echo -e "${BGreen}> Successfully updated dependencies${Color_Off}"
  else
    echo -e "> Gemfile not found${Color_Off}"
  fi
else
  echo -e "${BGreen}> Dependencies are up to date${Color_Off}"
fi

if [ "$RAILS_ENV" = "production" ]; then
  echo -e "${BRed}> Booting application on production mode...${Color_Off}"
fi

echo -e "> Executing the given command: ${BBlue}'$@'${Color_Off}"
exec "$@"
