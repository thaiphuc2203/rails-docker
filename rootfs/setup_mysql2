#!/usr/local/bin/ruby
# frozen_string_literal: true

require 'bundler'
Bundler.setup

require 'mysql2'
require 'rake'
require 'active_record'

PendingMigrationsError = Class.new(StandardError)
MissingDatabaseError = Class.new(StandardError)

missing_db_errors = [Mysql2::Error]
missing_db_errors << ActiveRecord::NoDatabaseError if defined?(ActiveRecord::NoDatabaseError)

def check_pending!
  if defined?(ActiveRecord::Migration.check_pending!)
    begin
      ActiveRecord::Migration.check_pending!
    rescue
      raise PendingMigrationsError
    end
  else
    migration_status = `bundle exec rake db:migrate:status`
    raise PendingMigrationsError if migration_status =~ /down\s*\d*/i
  end
end

def setup_database
  puts ':::: Setuping database...'
  response = `bundle exec rake db:setup`
  unless response =~ /pending migrations/
    puts "\033[0;32m:::: Database setup finished...\033[0m"
  end
end

def migrate
  puts ':::: Migrations are pending, running latest migrations'
  `bundle exec rake db:migrate`
  puts "\033[0;32m:::: Schema loaded correctly...\033[0m"
  0
end

exit begin
  connection_tries ||= 3
  begin
    puts ":::: Trying to establish connection with database..."
    ActiveRecord::Base.establish_connection
    ActiveRecord::Base.connection
    puts "\033[0;32m:::: Database is up and reachable\033[0m"
  rescue *missing_db_errors => errors
    puts "\033[0;31m:::: Database not found...\033[0m"
    raise MissingDatabaseError
  end
  check_pending!
  0
rescue PendingMigrationsError
  migrate
rescue MissingDatabaseError
  unless (connection_tries -= 1).zero?
    setup_database
    sleep ENV.fetch('APP_SETUP_WAIT', '5').to_i
    retry
  end
  1
ensure
  ActiveRecord::Base.clear_all_connections!
end
