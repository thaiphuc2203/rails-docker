#!/bin/ash

set -e

source /usr/local/bin/colors
source /usr/local/bin/logo

# Load Environment
echo ":::: Loading environment..."
eval "$(load_env)"
echo -e "${BGreen}:::: Environment loaded!${Color_Off}"

# Export default variables
export APP_PATH='/home/app/web'
export APP_BIN_PATH='/home/app/web/bin'
export APP_TEMP_PATH="$APP_PATH/tmp"
export APP_SETUP_LOCK="$APP_TEMP_PATH/setup.lock"
export APP_SETUP_WAIT="2"
export USER=app

# Functions
lock_setup() { mkdir -p $APP_TEMP_PATH && touch $APP_SETUP_LOCK; }
unlock_setup() { rm -rf $APP_SETUP_LOCK; }
wait_setup() { echo -e "${BRed}Waiting for app setup to finish...${Color_Off}"; sleep $APP_SETUP_WAIT; }
gems_up_to_date() { bundle check 1> /dev/null; }
configure_user() {
  set -e
  export UID=${USER_ID:-1000}

  echo ":::: Starting with (UID: $UID, USER: $USER)"
  adduser -u $UID -s /bin/ash -h /home/$USER -D $USER || echo "" > /dev/null

  if [ "$RAILS_ENV" = "development" -o "$RAILS_ENV" = "test" ]; then
    chown -R app:app $HOME_PATH

    # always upgrade bin folder to executable
    if [ -d "$APP_BIN_PATH" ]; then
      chmod +x $APP_BIN_PATH -R
    fi
  fi
}

# Install script dependencies
if [ "$RAILS_ENV" = "development" -o "$RAILS_ENV" = "test" ]; then
  export DISABLE_DATABASE_ENVIRONMENT_CHECK=1

  echo -e "${BGreen}:::: Booting application on development/test mode...${Color_Off}"
  echo ":::: RACK_ENV=$RACK_ENV and RAILS_ENV=$RAILS_ENV"
  echo ":::: Database is set as $DATABASE_URL"

  trap unlock_setup HUP INT QUIT TERM EXIT

  if [ -z "$1" ]; then set -- /bin/ash "$@"; fi

  if [ -d "$APP_PATH" -a "$1" = "rails" -o "$1" = "sidekiq" -o "$1" = "rake" -o "$1" = "bundle" -o "$1" = "shoryuken" -o "$1" = "guard" -o "$1" = "rspec" ]; then
    while [ -f $APP_SETUP_LOCK ]; do wait_setup; done

    lock_setup

    if [ -z $SKIP_BUNDLE_INSTALL ]; then
      echo ":::: Checking system bundle"
      if ! gems_up_to_date; then
        echo ":::: Installing/Updating Rails dependencies"
        bundle install
        echo -e "${BGreen}:::: Successfully updated dependencies${Color_Off}"
      else
        echo -e "${BGreen}:::: Dependencies are up to date${Color_Off}"
      fi
    fi

    if [ -z $SKIP_DB_SETUP ]; then
      echo ":::: Checking database consistency against current schema..."

      if [ "$RAILS_ENV" = "test" -a "$DROP_DATABASE_IF_TEST" = "enabled" ]; then
        bundle exec rake db:drop
      fi

      if [ -z $DATABASE_ADAPTER ]; then
        bundle exec setup_pg
      elif [ "$DATABASE_ADAPTER" = "mysql2" ]; then
        bundle exec setup_mysql2
      elif [ "$DATABASE_ADAPTER" = "postgresql" ]; then
        bundle exec setup_pg
      fi
    fi

    unlock_setup

    rm -rf "${APP_TEMP_PATH}/pids/server.pid" 2>/dev/null
    rm -rf "${APP_TEMP_PATH}/pids/sidekiq.pid" 2>/dev/null
    rm -rf "${APP_TEMP_PATH}/pids/unicorn.pid" 2>/dev/null
    rm -rf "${APP_TEMP_PATH}/pids/puma.pid" 2>/dev/null
  fi
fi

if [ "$RAILS_ENV" = "production" ]; then
  echo -e "${BRed}:::: Booting application on production mode...${Color_Off}"
fi

if [ -z $RAILS_ENV ]; then
  echo -e "${BRed}:::: Unknow mode...${Color_Off}"
  exit 1
fi

if [ "$RAILS_ENV" = "production" ]; then
  echo -e ":::: Executing the given command: ${BBlue}'$@'${Color_Off}"
  exec "$@"
else
  configure_user
  echo -e ":::: Executing the given command: ${BBlue}'$@'${Color_Off}"
  if [ -f /usr/bin/gosu ]; then
    /usr/bin/gosu $USER "$@"
  else
    exec "$@"
  fi
fi
